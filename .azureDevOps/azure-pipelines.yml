# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

parameters:
  - name: runConfig
    displayName: Run configuration
    values:
      - stas-check-pr
      - mgreisen-check-pr
      - joranwei-check-pr
      - tevoinea-check-pr
      - chkeita-check-pr

  - name: pr
    displayName: 'pull request id'
    type: string

  - name: retriesOnFailure
    displayName: Number times to re-run check-pr on failure
    type: number
    default: 10

  - name: mergeOnSuccess
    displayName: merge on success
    type: boolean
    default: false

  - name: skipCleanupOnFailure
    displayName: Skip Cleanup on Failure
    type: boolean
    default: false

  - name: region
    displayName: Region to use for testing
    type: string
    default: default
    values:
      - default
      - westus2
      - westus3
      - eastus
      - eastus2
      - southcentralus
      - westeurope
      - northeurope
      - uksouth
      - australiaeast

  - name: update_branch
    type: boolean
    default: false

  - name: linuxTrivialCrashAfl
    displayName: linux-trivial-crash-afl
    type: boolean
    default: true
  - name: linuxLibfuzzer
    displayName: linux-libfuzzer
    type: boolean
    default: true
  - name: linuxLibfuzzerWithOptions
    displayName: linux-libfuzzer-with-options
    type: boolean
    default: true
  - name: linuxLibfuzzerDlopen
    displayName: linux-libfuzzer-dlopen
    type: boolean
    default: true
  - name: linuxLibfuzzerLinkedLibrary
    displayName: linux-libfuzzer-linked-library
    type: boolean
    default: true
  - name: linuxLibfuzzerDotnet
    displayName: linux-libfuzzer-dotnet
    type: boolean
    default: true
  - name: linuxLibfuzzerAarch64Crosscompile
    displayName: linux-libfuzzer-aarch64-crosscompile
    type: boolean
    default: true
  - name: linuxLibfuzzerRust
    displayName: linux-libfuzzer-rust
    type: boolean
    default: true
  - name: linuxTrivialCrash
    displayName: linux-trivial-crash
    type: boolean
    default: true
  - name: linuxTrivialCrashAsan
    displayName: linux-trivial-crash-asan
    type: boolean
    default: true
  - name: windowsLibfuzzer
    displayName: windows-libfuzzer
    type: boolean
    default: true
  - name: windowsLibfuzzerLinkedLibrary
    displayName: windows-libfuzzer-linked-library
    type: boolean
    default: true
  - name: windowsLibfuzzerLoadLibrary
    displayName: windows-libfuzzer-load-library
    type: boolean
    default: true
  - name: windowsTrivialCrash
    displayName: windows-trivial-crash
    type: boolean
    default: true


variables:
- group: 1f-service-account
- group: ${{ parameters.runConfig }}
- name: github_pat
  value: test

- name: instance
  value: check-pr2-$(Build.BuildId)-$(System.JobAttempt)-$(System.JobId)

- name: endpoint
  value: 'https://$(instance).azurewebsites.net'

- name: subscription
  value: "038d675a-9bbe-4964-9cd1-6d50071a61b5"

- name: skipCleanupOnFailure
  value: ${{ parameters.skipCleanupOnFailure }}

- name: testRegion
  ${{ if eq(parameters.region, 'default') }}:
    value: $(region)
  ${{ else }}:
    value: ${{ parameters.region }}

- name: skip_update
  ${{ if parameters.update_branch }}:
    value: ''
  ${{else}}:
    value: '--skip_update'



pool:
  vmImage: ubuntu-latest

stages:
- stage: deploy
  jobs:
  - job: deploy
    steps:
    - template: common-steps.yml
    - task: PythonScript@0
      displayName: download
      inputs:
        scriptSource: filePath
        scriptPath: '$(Build.SourcesDirectory)/src/utils/check-pr/github_client.py'
        arguments: --pr ${{ parameters.pr }} --destination $(Build.SourcesDirectory)/checkpr ${{variables.skip_update}}
      env:
        GITHUB_ISSUE_TOKEN: $(GITHUB_ISSUE_TOKEN)

    - pwsh: |
        # Write your PowerShell commands here.
        cd $(Build.SourcesDirectory)/checkpr/
        Expand-Archive -Path release-artifacts.zip -DestinationPath .
        Expand-Archive -Path onefuzz-deployment*.zip -DestinationPath .
        Expand-Archive -Path integration-test-artifacts.zip -DestinationPath integration
      name: expand

    - pwsh: |
        python -m venv .env
        . ./.env/bin/Activate.ps1
        cd $(Build.SourcesDirectory)/checkpr/
        pip install install -q wheel
        pip install -q -r requirements.txt
        python deploy.py $(testRegion) $(instance) $(instance) azure-pipelines config.json
        # register cli
        # set secret
        $registration_info = python deploylib/registration.py create_cli_registration $(instance) $(subscription)

        $registration_info | % {
          $m = [regex]::Match("$_", "client_id: (?<client_id>.+)|client_secret: (?<client_secret>.+)")
          if ($m.Groups["client_secret"].Success) {
            Write-Host "setting client_secret"
            $secret = $m.Groups["client_secret"].Value
            Write-Host "##vso[task.setvariable variable=client_secret;issecret=true;isoutput=true]$secret"
          }
          if ($m.Groups["client_id"].Success) {
            Write-Host "setting client_id"
            $id = $m.Groups["client_id"].Value
            Write-Host "##vso[task.setvariable variable=client_id;isoutput=true]$id"
          }
        }
        Write-Host "setting endpoint"
        $instance_endpoint = "$(endpoint)"
        Write-Host "##vso[task.setvariable variable=instance_endpoint;isoutput=true]$instance_endpoint"
      name: deploy

    - pwsh: |
        python -m venv .env
        . ./.env/bin/Activate.ps1
        cd $(Build.SourcesDirectory)/checkpr
        pip install install -q wheel
        pip install -q -r requirements.txt
        pip install sdk/onefuzztypes-*.whl
        pip install sdk/onefuzz-*.whl
        cd integration
        $test_id = New-Guid
        python integration-test.py setup `
          --region $(testRegion) `
          --endpoint $(deploy.instance_endpoint) `
          --client_id $(client_id) `
          --client_secret $(client_secret) `
          --test_id $test_id
        Write-Host "##vso[task.setvariable variable=test_id;isoutput=true]$test_id"
      displayName: setup

- stage: test
  dependsOn: deploy
  condition: succeeded()
  variables:
      client_id: $[ stageDependencies.deploy.deploy.outputs['deploy.client_id'] ]
      client_secret: $[ stageDependencies.deploy.deploy.outputs['deploy.client_secret'] ]
      instance_endpoint: $[ stageDependencies.deploy.deploy.outputs['deploy.instance_endpoint'] ]
      test_id: $[ stageDependencies.deploy.deploy.outputs['setup.client_id'] ]
  jobs:
  - ${{ if eq(parameters.linuxLibfuzzer, true) }}:
    - template: test-stage.yml
      parameters:
        testTarget: linux-libfuzzer
        pr: ${{ parameters.pr }}
        jobName: linuxLibfuzzer
        skip_update: ${{variables.skip_update}}

  - ${{ if eq(parameters.linuxTrivialCrash, true) }}:
    - template: test-stage.yml
      parameters:
        testTarget: linux-trivial-crash
        pr: ${{ parameters.pr }}
        jobName: linuxTrivialCrash
        skip_update: ${{variables.skip_update}}

- stage: cleanup
  dependsOn: test
  variables:
    client_id: $[ stageDependencies.deploy.deploy.outputs['deploy.client_id'] ]
    client_secret: $[ stageDependencies.deploy.deploy.outputs['deploy.client_secret'] ]
    instance_endpoint: $[ stageDependencies.deploy.deploy.outputs['deploy.instance_endpoint'] ]
    test_id: $[ stageDependencies.deploy.deploy.outputs['setup.client_id'] ]
  jobs:
  - job: cleanup
    steps:
      - template: common-steps.yml
      - task: PythonScript@0
        displayName: download
        inputs:
          scriptSource: filePath
          scriptPath: '$(Build.SourcesDirectory)/src/utils/check-pr/github_client.py'
          arguments: --pr ${{ parameters.pr }} --destination $(Build.SourcesDirectory)/checkpr ${{variables.skip_update}}
        env:
          GITHUB_ISSUE_TOKEN: $(GITHUB_ISSUE_TOKEN)

      - pwsh: |
          # Write your PowerShell commands here.
          cd $(Build.SourcesDirectory)/checkpr/
          Expand-Archive -Path release-artifacts.zip -DestinationPath .
          Expand-Archive -Path onefuzz-deployment*.zip -DestinationPath .
          Expand-Archive -Path integration-test-artifacts.zip -DestinationPath integration
        name: expand

      - pwsh: |
          python -m venv .env
          . ./.env/bin/Activate.ps1
          cd $(Build.SourcesDirectory)/checkpr
          pip install install -q wheel
          pip install -q -r requirements.txt
          pip install sdk/onefuzztypes-*.whl
          pip install sdk/onefuzz-*.whl
          cd integration

          python integration-test.py cleanup $(test_id) `
            --endpoint $(instance_endpoint) `
            --client_id $(client_id) `
            --client_secret $(client_secret)

        name: deploy

