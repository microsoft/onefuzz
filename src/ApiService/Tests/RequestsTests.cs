using System.IO;
using System.Text;
using System.Text.Json;
using System.Threading;
using Azure.Core.Serialization;
using Microsoft.OneFuzz.Service;
using Microsoft.OneFuzz.Service.OneFuzzLib.Orm;
using Xunit;

namespace Tests;

// This class contains tests for serialization and
// deserialization of examples generated by the 
// onefuzz-agent’s `debug` sub-command. We test each
// example for roundtripping which ensures that no
// data is lost upon deserialization.
//
// We could set this up to run onefuzz-agent itself
// but that seems like additional unnecessary complexity;
// at the moment the Rust code is not built when building C#.
public class RequestsTests {

    private readonly JsonObjectSerializer _serializer = new(serializationOptions());

    private static JsonSerializerOptions serializationOptions() {
        // base on the serialization options used at runtime, but
        // also indent to match inputs:
        var result = EntityConverter.GetJsonSerializerOptions();
        result.WriteIndented = true;
        return result;
    }

    private void AssertRoundtrips<T>(string json) {
        var stream = new MemoryStream(Encoding.UTF8.GetBytes(json));
        var deserialized = (T?)_serializer.Deserialize(stream, typeof(T), CancellationToken.None);
        var reserialized = _serializer.Serialize(deserialized);
        var result = Encoding.UTF8.GetString(reserialized);
        Assert.Equal(json, result);
    }

    [Fact]
    public void NodeEvent_WorkerEvent_Done() {
        // generated with: onefuzz-agent debug node_event worker_event done

        AssertRoundtrips<NodeStateEnvelope>(@"{
  ""event"": {
    ""worker_event"": {
      ""done"": {
        ""task_id"": ""00e1b131-e2a1-444d-8cc6-841e6cd48f93"",
        ""exit_status"": {
          ""code"": 0,
          ""signal"": null,
          ""success"": true
        },
        ""stderr"": ""stderr output goes here"",
        ""stdout"": ""stdout output goes here""
      }
    }
  },
  ""machine_id"": ""5ccbe157-a84c-486a-8171-d213fba27247""
}");
    }

    [Fact]
    public void NodeEvent_WorkerEvent_Running() {
        // generated with: onefuzz-agent debug node_event worker_event running

        AssertRoundtrips<NodeStateEnvelope>(@"{
  ""event"": {
    ""worker_event"": {
      ""running"": {
        ""task_id"": ""1763e113-02a0-4a3e-b477-92762f030d95""
      }
    }
  },
  ""machine_id"": ""e819efa5-c43f-46a2-bf9e-cc6a6de86ef9""
}");
    }

    [Fact]
    public void NodeEvent_StateUpdate_Init() {
        // generated with: onefuzz-agent debug node_event state_update '"init"'

        AssertRoundtrips<NodeStateEnvelope>(@"{
  ""event"": {
    ""state_update"": {
      ""state"": ""init""
    }
  },
  ""machine_id"": ""38bd035b-fa5b-4cbc-9037-aa4e6550f713""
}");
    }

    [Fact]
    public void NodeEvent_StateUpdate_Free() {
        // generated with: onefuzz-agent debug node_event state_update '"free"'

        AssertRoundtrips<NodeStateEnvelope>(@"{
  ""event"": {
    ""state_update"": {
      ""state"": ""free""
    }
  },
  ""machine_id"": ""09a0cd4c-a918-4777-98b6-617e42084eb1""
}");
    }

    [Fact]
    public void NodeEvent_StateUpdate_SettingUp() {
        // generated with: onefuzz-agent debug node_event state_update '"setting_up"'

        AssertRoundtrips<NodeStateEnvelope>(@"{
  ""event"": {
    ""state_update"": {
      ""state"": ""setting_up"",
      ""data"": {
        ""tasks"": [
          ""163121e2-7df3-4567-9bd8-21b1653fac83"",
          ""00604d49-b400-4877-8630-1d6ade31a61d"",
          ""719a6316-98c4-4e77-9f3a-324f09505887""
        ]
      }
    }
  },
  ""machine_id"": ""82da6784-fd8c-426a-8baf-643654a060d8""
}");
    }


    [Fact]
    public void NodeEvent_StateUpdate_Rebooting() {
        // generated with: onefuzz-agent debug node_event state_update '"rebooting"'

        AssertRoundtrips<NodeStateEnvelope>(@"{
  ""event"": {
    ""state_update"": {
      ""state"": ""rebooting""
    }
  },
  ""machine_id"": ""8825ca94-11d9-4e83-9df0-c052ee8b77c8""
}");
    }


    [Fact]
    public void NodeEvent_StateUpdate_Ready() {
        // generated with: onefuzz-agent debug node_event state_update '"ready"'

        AssertRoundtrips<NodeStateEnvelope>(@"{
  ""event"": {
    ""state_update"": {
      ""state"": ""ready""
    }
  },
  ""machine_id"": ""a98f9a27-cfb9-426b-a6f2-5b2c04268697""
}");
    }


    [Fact]
    public void NodeEvent_StateUpdate_Busy() {
        // generated with: onefuzz-agent debug node_event state_update '"busy"'

        AssertRoundtrips<NodeStateEnvelope>(@"{
  ""event"": {
    ""state_update"": {
      ""state"": ""busy""
    }
  },
  ""machine_id"": ""e4c70423-bb5c-40a9-9645-942243738240""
}");
    }


    [Fact]
    public void NodeEvent_StateUpdate_Done() {
        // generated with: onefuzz-agent debug node_event state_update '"done"'

        AssertRoundtrips<NodeStateEnvelope>(@"{
  ""event"": {
    ""state_update"": {
      ""state"": ""done"",
      ""data"": {
        ""error"": null,
        ""script_output"": null
      }
    }
  },
  ""machine_id"": ""5284cba4-aa7a-4285-b2b8-d5123c182bc3""
}");
    }
}
