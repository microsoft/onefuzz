#!/usr/bin/env python


import string
import constants

data = {}

name_check = string.ascii_uppercase + "_"

HEADER = """
// Rust generated by Microsoft, code originally from:
//      https://github.com/google/clusterfuzz/blob/master/src/
//          python/lib/clusterfuzz/stacktraces/constants.py
//
// Original Copyright:
//
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

"""

# TODO: when clusterfuzz #2557 is merged, this should be removed
def clean(value: str) -> str:
    return value.replace('\\@', '@')

for name in sorted(dir(constants)):
    if all(x in string.ascii_uppercase + "_" for x in name):
        entry = getattr(constants, name)
        if entry is None:
            continue

        data[name] = entry

for_rust = {
    "STACK_FRAME_IGNORE_REGEXES": [
        f'r"{clean(x)}"' for x in data["STACK_FRAME_IGNORE_REGEXES"]
    ],
}

with open("../src/generated.rs", "w") as handle:
    handle.write(HEADER)
    for key in for_rust:
        if isinstance(for_rust[key], list):
            value = ",".join(for_rust[key])
            handle.write(f"pub const {key}: &[&str] = &[{value}];")
        elif isinstance(for_rust[key], str):
            value = for_rust[key]
            handle.write(f"pub const {key}: &str = {value};")
