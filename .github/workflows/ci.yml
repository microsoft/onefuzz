name: Build
on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always
  SCCACHE_DIR: ${{github.workspace}}/sccache/
  SCCACHE_CACHE_SIZE: 1G
  ACTIONS_CACHE_KEY_DATE: 2021-06-25-01

jobs:
  agent:
    runs-on: "${{ matrix.os }}"
    steps:
    - uses: actions/checkout@v2
    - name: Rust Prereq Cache
      uses: actions/cache@v2
      id: cache-rust-prereqs
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
        key: rust-${{ runner.os }}-${{ env.ACTIONS_CACHE_KEY_DATE }}
        restore-keys: |
           rust-${{ runner.os }}
    - name: Install Rust Prereqs
      if: steps.cache-rust-prereqs.outputs.cache-hit != 'true'
      shell: bash 
      run: src/ci/rust-prereqs.sh
    - name: Rust Compile Cache
      uses: actions/cache@v2
      with:
        path: |
          sccache
          src/agent/target
        key: agent-${{ runner.os }}-${{ hashFiles('src/agent/Cargo.lock') }}-${{ env.ACTIONS_CACHE_KEY_DATE }}
        restore-keys: |
           agent-${{ runner.os }}
    - name: Linux Prereqs
      run: |
        sudo apt-get -y update
        sudo apt-get -y install libssl1.0-dev libunwind-dev
      if: "${{ runner.os == 'Linux' }}"
    - run: src/ci/agent.sh
      shell: bash
    - uses: actions/upload-artifact@v2.2.2
      with:
        name: build-artifacts
        path: artifacts
    strategy:
      matrix:
        os:
        - ubuntu-18.04
        - windows-2019
  azcopy:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - run: src/ci/azcopy.sh
    - uses: actions/upload-artifact@v2.2.2
      with:
        name: build-artifacts
        path: artifacts
  cli:
    needs:
    - onefuzztypes
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2
    - run: src/ci/set-versions.sh
      shell: bash
    - uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - uses: actions/download-artifact@v2.0.8
      with:
        name: build-artifacts
        path: artifacts
    - name: Build
      shell: bash
      run: |
        set -ex
        ls artifacts
        cd src/cli
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip-licenses -uf json > onefuzz/data/licenses.json
        python setup.py sdist bdist_wheel
        pip install -r ./requirements.txt ../../artifacts/sdk/*.whl
        pip install six
        pyinstaller onefuzz/__main__.py --onefile --name onefuzz --additional-hooks-dir extra/pyinstaller --hidden-import='pkg_resources.py2_warn' --exclude-module tkinter --exclude-module PySide2 --exclude-module PIL.ImageDraw --exclude-module Pillow --clean --add-data "onefuzz/data/privacy.txt;onefuzz/data" --add-data "onefuzz/data/licenses.json;onefuzz/data"
        ./dist/onefuzz.exe --version
        ./dist/onefuzz.exe privacy_statement
        mkdir -p ${GITHUB_WORKSPACE}/artifacts/windows-cli/
        mkdir -p ${GITHUB_WORKSPACE}/artifacts/sdk/
        cp dist/*.tar.gz dist/*.whl ${GITHUB_WORKSPACE}/artifacts/sdk/
        cp dist/onefuzz.exe ${GITHUB_WORKSPACE}/artifacts/windows-cli/
    - uses: actions/upload-artifact@v2.2.2
      with:
        name: build-artifacts
        path: artifacts
    - name: lint
      shell: bash
      run: |
        set -ex
        cd src/cli
        pip install -r requirements-lint.txt
        flake8 .
        bandit -r ./onefuzz/
        black onefuzz examples tests --check
        isort --profile black ./onefuzz ./examples/ ./tests/ --check
        pytest -v tests
        ../ci/disable-py-cache.sh
        mypy --ignore-missing-imports ./onefuzz ./examples ./tests

        # set a minimum confidence to ignore known false positives
        vulture --min-confidence 61 onefuzz
  contrib-webhook-teams-service:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: lint
      shell: bash
      run: |
        set -ex
        cd contrib/webhook-teams-service
        python -m pip install --upgrade pip isort black mypy flake8
        pip install -r requirements.txt
        mypy webhook
        black webhook --check
        isort --profile black webhook
        flake8 webhook
  deploy-onefuzz-via-azure-devops:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: lint
      shell: bash
      run: |
        set -ex
        cd contrib/deploy-onefuzz-via-azure-devops
        python -m pip install --upgrade pip
        python -m pip install tox pipenv
        tox
  onefuzztypes:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - run: src/ci/set-versions.sh
    - uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - run: src/ci/onefuzztypes.sh
    - uses: actions/upload-artifact@v2.2.2
      with:
        name: build-artifacts
        path: artifacts
  proxy:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Rust Prereq Cache
      uses: actions/cache@v2
      id: cache-rust-prereqs
      with:
        path: |
          sccache
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
        key: rust-${{ runner.os }}-2020-06-25-01
        restore-keys: |
           rust-${{ runner.os }}
    - name: Install Rust Prereqs
      if: steps.cache-rust-prereqs.outputs.cache-hit != 'true'
      shell: bash 
      run: src/ci/rust-prereqs.sh
    - name: Rust Compile Cache
      uses: actions/cache@v2
      with:
        path: |
          sccache
          src/proxy-manager/target
        key: proxy-${{ runner.os }}-${{ hashFiles('src/proxy-manager/Cargo.lock') }}-${{ env.ACTIONS_CACHE_KEY_DATE }}
        restore-keys: |
           proxy-${{ runner.os }}
    - run: src/ci/proxy.sh
    - uses: actions/upload-artifact@v2.2.2
      with:
        name: build-artifacts
        path: artifacts
  service:
    needs:
    - onefuzztypes
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - run: src/ci/set-versions.sh
    - uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - uses: actions/download-artifact@v2.0.8
      with:
        name: build-artifacts
        path: artifacts
    - name: Build Service
      run: |
        cd src/api-service/__app__
        echo ${GITHUB_RUN_ID} | tee onefuzzlib/build.id
        echo ${GITHUB_SHA} | tee onefuzzlib/git.version
        python -m pip install --upgrade pip
        pip install --target="./.python_packages/lib/site-packages" -r ./requirements.txt ${GITHUB_WORKSPACE}/artifacts/sdk/onefuzztypes-*.whl
        zip -r api-service.zip .
        mkdir -p ${GITHUB_WORKSPACE}/artifacts/service
        cp api-service.zip ${GITHUB_WORKSPACE}/artifacts/service
    - uses: actions/upload-artifact@v2.2.2
      with:
        name: build-artifacts
        path: artifacts
    - name: lint
      run: |
        cd src/api-service
        rm -rf __app__/.python_packages
        python -m pip install --upgrade pip
        pip install ${GITHUB_WORKSPACE}/artifacts/sdk/onefuzztypes-*.whl
        pip install -r __app__/requirements.txt
        pip install -r requirements-dev.txt
        pytest
        flake8 .
        bandit -r ./__app__/
        black ./__app__/ ./tests --check
        isort --profile black ./__app__/ ./tests --check
        mypy __app__ ./tests

        # set a minimum confidence to ignore known false positives
        vulture --min-confidence 61 __app__ 

        ../ci/disable-py-cache.sh
        mypy __app__ ./tests
  afl:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - run: src/ci/afl.sh
    - uses: actions/upload-artifact@v2.2.2
      with:
        name: build-artifacts
        path: artifacts
  aflpp:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - run: src/ci/aflpp.sh
    - uses: actions/upload-artifact@v2.2.2
      with:
        name: build-artifacts
        path: artifacts
  radamsa-linux:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - run: src/ci/radamsa-linux.sh
    - uses: actions/upload-artifact@v2.2.2
      with:
        name: build-artifacts
        path: artifacts
  radamsa-win64:
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2
    - run: c:\msys64\usr\bin\bash src/ci/radamsa-windows.sh
    - uses: actions/upload-artifact@v2.2.2
      with:
        name: build-artifacts
        path: artifacts
  package:
    needs:
    - agent
    - azcopy
    - cli
    - onefuzztypes
    - proxy
    - service
    - afl
    - aflpp
    - radamsa-linux
    - radamsa-win64
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2.0.8
      with:
        name: build-artifacts
        path: artifacts
    - uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Lint
      shell: bash
      run: |
        set -ex
        cd src/deployment
        python -m pip install --upgrade pip
        pip install mypy isort black types-requests
        mypy .
        isort --profile black . --check
        black . --check
    - name: Package Onefuzz
      run: |
          set -ex
          find artifacts
          mkdir release-artifacts
          cp -r src/runtime-tools src/deployment/tools
          if [ -f artifacts/azcopy/NOTICE.txt ]; then
              cp artifacts/azcopy/azcopy artifacts/azcopy/NOTICE.txt src/deployment/tools/linux
              cp artifacts/azcopy/azcopy.exe artifacts/azcopy/NOTICE.txt src/deployment/tools/win64
          else
              cp artifacts/azcopy/azcopy artifacts/azcopy/ThirdPartyNotice.txt src/deployment/tools/linux
              cp artifacts/azcopy/azcopy.exe artifacts/azcopy/ThirdPartyNotice.txt src/deployment/tools/win64
          fi
          cp artifacts/agent/onefuzz-supervisor.exe src/deployment/tools/win64/
          cp artifacts/agent/onefuzz-agent.exe src/deployment/tools/win64/
          cp artifacts/agent/onefuzz_supervisor.pdb src/deployment/tools/win64/
          cp artifacts/agent/onefuzz_agent.pdb src/deployment/tools/win64/
          cp artifacts/agent/onefuzz-supervisor src/deployment/tools/linux/
          cp artifacts/agent/onefuzz-agent src/deployment/tools/linux/
          cp artifacts/proxy/onefuzz-proxy-manager src/deployment/tools/linux/
          cp artifacts/service/api-service.zip src/deployment
          cp -r artifacts/third-party src/deployment
          cp -r src/agent/script/linux/libfuzzer-coverage src/deployment/tools/linux/libfuzzer-coverage
          cp -r src/agent/script/win64/libfuzzer-coverage src/deployment/tools/win64/libfuzzer-coverage
          echo $GITHUB_RUN_ID | tee src/deployment/.build.id
          echo $GITHUB_SHA | tee src/deployment/.sha
          ./src/ci/get-version.sh > src/deployment/VERSION
          (cd src/deployment ; zip -r onefuzz-deployment-$(cat VERSION).zip . )
          cp src/deployment/onefuzz-deployment*zip release-artifacts
          cp -r artifacts/sdk release-artifacts
          cp -r artifacts/windows-cli/onefuzz.exe release-artifacts/onefuzz-cli-$(./src/ci/get-version.sh).exe
    - uses: actions/upload-artifact@v2.2.2
      with:
        name: release-artifacts
        path: release-artifacts
  build-integration-tests-linux:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - run: |
          set -ex
          cd src/integration-tests
          mkdir -p artifacts
          cp integration-test.py artifacts/

          mkdir -p artifacts/linux-libfuzzer
          (cd libfuzzer ; make )
          cp -r libfuzzer/fuzz.exe libfuzzer/seeds artifacts/linux-libfuzzer

          mkdir -p artifacts/linux-libfuzzer-regression
          (cd libfuzzer-regression ; make )
          cp -r libfuzzer-regression/broken.exe libfuzzer-regression/fixed.exe libfuzzer-regression/seeds artifacts/linux-libfuzzer-regression

          mkdir -p artifacts/linux-trivial-crash
          (cd trivial-crash ; make )
          cp -r trivial-crash/fuzz.exe trivial-crash/seeds artifacts/linux-trivial-crash

          mkdir -p artifacts/linux-libfuzzer-dotnet
          (cd libfuzzer-dotnet; make)
          cp -r libfuzzer-dotnet/my-fuzzer libfuzzer-dotnet/inputs artifacts/linux-libfuzzer-dotnet/

          mkdir -p artifacts/linux-libfuzzer-dlopen
          (cd libfuzzer-dlopen; make)
          cp -r libfuzzer-dlopen/{fuzz.exe,*.so,seeds} artifacts/linux-libfuzzer-dlopen/

          mkdir -p artifacts/linux-libfuzzer-linked-library
          (cd libfuzzer-linked-library; make)
          cp -r libfuzzer-linked-library/{fuzz.exe,*.so,seeds} artifacts/linux-libfuzzer-linked-library/

          mkdir -p artifacts/linux-trivial-crash-asan
          (cd trivial-crash ; make clean; make CFLAGS='-fsanitize=address -fno-omit-frame-pointer')
          cp -r trivial-crash/fuzz.exe trivial-crash/seeds artifacts/linux-trivial-crash-asan

          mkdir -p artifacts/linux-libfuzzer-rust
          (cd libfuzzer-rust ; make )
          cp -r libfuzzer-rust/fuzz/target/x86_64-unknown-linux-gnu/release/fuzz_target_1 artifacts/linux-libfuzzer-rust

          # AFL v2.75b
          mkdir -p artifacts/linux-trivial-crash-afl
          git clone https://github.com/google/AFL
          (cd AFL; git checkout 82b5e359463238d790cadbe2dd494d6a4928bff3; make afl-gcc afl-fuzz afl-as)
          export AFL_CC_PATH=$PWD/AFL/afl-clang
          (cd trivial-crash ; make clean; make CC=$AFL_CC_PATH)
          cp -r trivial-crash/fuzz.exe trivial-crash/seeds artifacts/linux-trivial-crash-afl

          # libfuzzer cross-compiled to aarch64
          mkdir -p artifacts/linux-libfuzzer-aarch64-crosscompile
          (cd libfuzzer-aarch64-crosscompile; make)
          cp -r libfuzzer-aarch64-crosscompile/fuzz.exe libfuzzer-aarch64-crosscompile/inputs artifacts/linux-libfuzzer-aarch64-crosscompile

    - uses: actions/upload-artifact@v2.2.2
      with:
        name: integration-test-artifacts
        path: src/integration-tests/artifacts
  build-integration-tests-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force 
          $ProgressPreference = 'SilentlyContinue'
          Invoke-Expression (Invoke-RestMethod 'https://chocolatey.org/install.ps1')
          choco install llvm
          choco install make
          $env:Path += ";C:\Program Files\LLVM\bin;C:\ProgramData\chocolatey\bin"
          
          cd src/integration-tests
          
          mkdir artifacts/windows-libfuzzer
          cd libfuzzer
          make
          cp fuzz.exe,fuzz.pdb,seeds ../artifacts/windows-libfuzzer -Recurse
          cd ../

          mkdir artifacts/windows-trivial-crash
          cd trivial-crash
          make
          cp fuzz.exe,fuzz.pdb,seeds ../artifacts/windows-trivial-crash -Recurse
          cd ../

          mkdir artifacts/windows-libfuzzer-linked-library
          cd libfuzzer-linked-library
          make -f Makefile.windows
          cp fuzz.exe,fuzz.pdb,bad1.dll,bad1.pdb,bad2.dll,bad2.pdb,seeds ../artifacts/windows-libfuzzer-linked-library -Recurse
          cd ../
          
          mkdir artifacts/windows-libfuzzer-load-library
          cd libfuzzer-load-library
          make
          cp fuzz.exe,fuzz.pdb,bad.dll,bad.pdb,seeds ../artifacts/windows-libfuzzer-load-library -Recurse
          cd ../

          mkdir artifacts/windows-trivial-crash-asan
          cd trivial-crash
          make clean
          make CFLAGS='-fsanitize=address -fno-omit-frame-pointer'
          cp fuzz.exe,fuzz.pdb,seeds ../artifacts/windows-trivial-crash-asan -Recurse
      shell: powershell
    - uses: actions/upload-artifact@v2.2.2
      with:
        name: integration-test-artifacts
        path: src/integration-tests/artifacts
